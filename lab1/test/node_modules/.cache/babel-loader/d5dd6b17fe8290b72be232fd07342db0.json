{"ast":null,"code":"import _objectSpread from \"/Users/cooperbell/Projects/reactTutorials/real-time-chart/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/cooperbell/Projects/reactTutorials/real-time-chart/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cooperbell/Projects/reactTutorials/real-time-chart/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cooperbell/Projects/reactTutorials/real-time-chart/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cooperbell/Projects/reactTutorials/real-time-chart/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cooperbell/Projects/reactTutorials/real-time-chart/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cooperbell/Projects/reactTutorials/real-time-chart/src/app.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nvar styles = function styles(theme) {\n  return {\n    \"chart-container\": {\n      height: 400,\n      width: 800\n    }\n  };\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      lineChartData: {\n        labels: [],\n        datasets: [{\n          type: \"line\",\n          label: \"BTC-USD\",\n          backgroundColor: \"rgba(0,0,0,0)\",\n          borderColor: _this.props.theme.palette.primary.main,\n          pointBackgroundColor: _this.props.theme.palette.secondary.main,\n          pointBorderColor: _this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data: []\n        }]\n      },\n      lineChartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          enabled: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10\n            }\n          }],\n          yAxes: [{\n            position: 'right'\n          }]\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var subscribe = {\n        type: \"subscribe\",\n        channels: [{\n          name: \"ticker\",\n          product_ids: [\"BTC-USD\"]\n        }]\n      };\n      this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\n\n      this.ws.onopen = function () {\n        _this2.ws.send(JSON.stringify(subscribe));\n      };\n\n      this.ws.onmessage = function (e) {\n        var value = JSON.parse(e.data);\n\n        if (value.type !== \"ticker\") {\n          return;\n        }\n\n        var oldBtcDataSet = _this2.state.lineChartData.datasets[0];\n\n        var newBtcDataSet = _objectSpread({}, oldBtcDataSet);\n\n        newBtcDataSet.data.push(value.price);\n\n        var newChartData = _objectSpread({}, _this2.state.lineChartData, {\n          datasets: [newBtcDataSet],\n          labels: _this2.state.lineChartData.labels.concat(new Date().toLocaleTimeString())\n        });\n\n        _this2.setState({\n          lineChartData: newChartData\n        });\n      };\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.ws.close();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = this.props.classes;\n      return React.createElement(\"div\", {\n        className: classes[\"chart-container\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        data: this.state.lineChartData,\n        options: this.state.lineChartOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default withStyles(styles, {\n  withTheme: true\n})(App);","map":{"version":3,"sources":["/Users/cooperbell/Projects/reactTutorials/real-time-chart/src/app.js"],"names":["React","render","withStyles","Chart","styles","theme","height","width","App","state","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","props","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","data","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","yAxes","position","subscribe","channels","name","product_ids","ws","WebSocket","onopen","send","JSON","stringify","onmessage","e","value","parse","oldBtcDataSet","newBtcDataSet","push","price","newChartData","concat","Date","toLocaleTimeString","setState","close","classes","Component","withTheme"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Chart from \"./chart\";\n\nconst styles = theme => ({\n  \"chart-container\": {\n    height: 400,\n    width: 800\n  }\n});\n\nclass App extends React.Component {\n  state = {\n    lineChartData: {\n      labels: [],\n      datasets: [\n        {\n          type: \"line\",\n          label: \"BTC-USD\",\n          backgroundColor: \"rgba(0,0,0,0)\",\n          borderColor: this.props.theme.palette.primary.main,\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\n          pointBorderColor: this.props.theme.palette.secondary.main,\n          borderWidth: \"2\",\n          lineTension: 0.45,\n          data:[]\n        }\n      ]\n    },\n    lineChartOptions: {\n      responsive: true,\n      maintainAspectRatio: false,\n      tooltips: {\n        enabled: true\n      },\n      scales: {\n        xAxes: [\n          {\n            ticks: {\n              autoSkip: true,\n              maxTicksLimit: 10\n            }\n          }\n        ],\n        yAxes: [\n          {\n            position: 'right'\n          }\n        ]\n      }\n    }\n  };\n\n  componentDidMount() {\n    const subscribe = {\n      type: \"subscribe\",\n      channels: [\n        {\n          name: \"ticker\",\n          product_ids: [\"BTC-USD\"]\n        }\n      ]\n    };\n\n    this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\n\n    this.ws.onopen = () => {\n      this.ws.send(JSON.stringify(subscribe));\n    };\n\n    this.ws.onmessage = e => {\n      const value = JSON.parse(e.data);\n      if (value.type !== \"ticker\") {\n        return;\n      }\n\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\n      const newBtcDataSet = { ...oldBtcDataSet };\n      newBtcDataSet.data.push(value.price);\n\n      const newChartData = {\n        ...this.state.lineChartData,\n        datasets: [newBtcDataSet],\n        labels: this.state.lineChartData.labels.concat(\n          new Date().toLocaleTimeString()\n        )\n      };\n\n      this.setState({ lineChartData: newChartData });\n    };\n  }\n\n  componentWillUnmount() {\n    this.ws.close();\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes[\"chart-container\"]}>\n        <Chart\n          data={this.state.lineChartData}\n          options={this.state.lineChartOptions}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(App);\n"]},"metadata":{},"sourceType":"module"}